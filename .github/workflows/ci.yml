name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  NODE_VERSION: '22.11.0'
  PNPM_VERSION: '10.11.0'

jobs:
  test-rust:
    name: Rust Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: wasm32-unknown-unknown

      # Cargo.lockが存在することを確認し、再現可能なビルドを保証
      - name: Verify reproducible build with Cargo.lock
        run: |
          # Cargo.lockが存在することを確認
          if [ ! -f Cargo.lock ]; then
            echo "ERROR: Cargo.lock not found. This should be committed for applications."
            exit 1
          fi
          # Cargo.lockを使用してワークスペース全体をチェック（再現可能性のため）
          cargo check --workspace --locked

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --locked -- -D warnings

      - name: Run Rust tests
        run: cargo test --workspace --verbose --locked

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build WASM packages with locked dependencies
        run: |
          wasm-pack build packages/crates/wasm-math --target web --scope internal --release
          wasm-pack build packages/crates/wasm-text --target web --scope internal --release
          wasm-pack build packages/crates/wasm-utils --target web --scope internal --release

      - name: Check workspace structure
        run: |
          echo "Rust Workspace members:"
          cargo metadata --format-version 1 | jq -r '.workspace_members[]'
          echo "Built WASM packages:"
          ls -la packages/crates/*/pkg/ || echo "No pkg directories found"

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: test-rust

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Rust toolchain for WASM
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Verify Cargo.lock exists
        run: |
          if [ ! -f Cargo.lock ]; then
            echo "ERROR: Cargo.lock not found. This should be committed for applications."
            exit 1
          fi

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build WASM packages with locked dependencies
        run: |
          wasm-pack build packages/crates/wasm-math --target web --scope internal --release
          wasm-pack build packages/crates/wasm-text --target web --scope internal --release
          wasm-pack build packages/crates/wasm-utils --target web --scope internal --release

      - name: Verify pnpm-lock.yaml exists
        run: |
          if [ ! -f pnpm-lock.yaml ]; then
            echo "ERROR: pnpm-lock.yaml not found. This should be committed for applications."
            exit 1
          fi

      - name: Install dependencies with frozen lockfile
        run: pnpm install --frozen-lockfile

      - name: TypeScript type check
        run: pnpm run typecheck

      - name: Code quality check
        run: pnpm run check

      - name: Run frontend tests
        run: pnpm run test:run

      - name: Build frontend
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: packages/app/dist/
          retention-days: 1

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: [test-rust, test-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: |
          # Check for vulnerabilities (ignore known unfixable issues if any)
          cargo audit

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies with frozen lockfile
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: pnpm audit --audit-level moderate

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test-rust, test-frontend, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Verify built image
        run: |
          echo "Built image tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo "Testing image health..."
          docker run --rm -d --name test-container \
            -p 3000:3000 \
            $(echo "${{ steps.meta.outputs.tags }}" | head -n1) &
          sleep 10
          if curl -f http://localhost:3000 > /dev/null 2>&1; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            docker logs test-container || true
            exit 1
          fi
          docker stop test-container || true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying ghcr.io/${{ github.repository }}:develop to staging environment..."
          echo "Available for deployment:"
          echo "- Frontend: React + WASM app"
          echo "- Image: ghcr.io/${{ github.repository }}:develop"
          # ここにステージング環境へのデプロイ処理を追加
          # 例:
          # docker pull ghcr.io/${{ github.repository }}:develop
          # docker-compose -f docker-compose.staging.yml up -d

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to production
        run: |
          echo "Deploying ghcr.io/${{ github.repository }}:latest to production environment..."
          echo "Available for deployment:"
          echo "- Frontend: React + WASM app"
          echo "- Image: ghcr.io/${{ github.repository }}:latest"
          # ここに本番環境へのデプロイ処理を追加
          # 例:
          # docker pull ghcr.io/${{ github.repository }}:latest
          # docker-compose -f docker-compose.prod.yml up -d

  workspace-info:
    name: Workspace Information
    runs-on: ubuntu-latest
    needs: [test-rust, test-frontend]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Display workspace information
        run: |
          echo "## Workspace Structure" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "### Rust Workspace" >> $GITHUB_STEP_SUMMARY
          cargo metadata --format-version 1 | jq -r '.workspace_members[]' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### PNPM Workspace" >> $GITHUB_STEP_SUMMARY
          pnpm list --depth=0 2>/dev/null || echo "PNPM packages will be listed after installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          echo "## Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- PNPM: ${{ env.PNPM_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Rust: \$(rustc --version)" >> $GITHUB_STEP_SUMMARY
          echo "- WASM Target: wasm32-unknown-unknown" >> $GITHUB_STEP_SUMMARY
          
          echo "## Dependency Verification" >> $GITHUB_STEP_SUMMARY
          echo "- Cargo.lock: $([ -f Cargo.lock ] && echo '✅ Present' || echo '❌ Missing')" >> $GITHUB_STEP_SUMMARY
          echo "- pnpm-lock.yaml: $([ -f pnpm-lock.yaml ] && echo '✅ Present' || echo '❌ Missing')" >> $GITHUB_STEP_SUMMARY